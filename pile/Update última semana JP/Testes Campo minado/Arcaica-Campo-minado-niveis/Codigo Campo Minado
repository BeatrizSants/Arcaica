<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <title>Campo Minado</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            height: 100vh;
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(8, 30px);
            grid-template-rows: repeat(8, 30px);
            gap: 1px;
            background-color: #333;
        }

        .cell {
            background-color: #ccc;
            border: 1px solid #999;
            text-align: center;
            line-height: 30px;
            cursor: pointer;
        }

        .cell.revealed {
            background-color: #ddd;
        }

        .cell.bomb {
            background-color: red;
            color: white;
        }
    </style>
</head>
<body>
    <h1>Campo Minado</h1>
    <div id="board" class="game-board"></div>
    
    <!-- Bot√£o para reiniciar o jogo -->
    <button id="reset-button" class="reset-button" onclick="resetGame()">Reiniciar Jogo</button>
    
    <script>
        const board = document.getElementById("board");
        const size = 8;  /* Tamanho da grade */
        const minesCount = 10;  /* N√∫mero de minas */
        let mines = new Set();  /* Conjunto para armazenar minas */

        // Fun√ß√£o para criar o tabuleiro do jogo
        function createBoard() {
            board.innerHTML = "";

            // Colocar minas em posi√ß√µes aleat√≥rias
            while (mines.size < minesCount) {
                const randomPosition = Math.floor(Math.random() * (size * size));
                mines.add(randomPosition);
            }

            // Criar as c√©lulas do tabuleiro
            for (let i = 0; i < size * size; i++) {
                const cell = document.createElement("div");
                cell.className = "cell";
                cell.addEventListener("click", revealCell);
                board.appendChild(cell);
            }
        }

        // Fun√ß√£o para revelar uma c√©lula
        function revealCell(event) {
            const cell = event.target;
            const index = Array.from(board.children).indexOf(cell);

            if (cell.classList.contains("revealed")) {
                return;  /* Se a c√©lula j√° estiver revelada, n√£o faz nada */
            }

            if (mines.has(index)) {
                cell.textContent = "üí£";  /* Exibe uma bomba */
                cell.classList.add("bomb");  /* Estilo de bomba */
                alert("Game Over! Voc√™ encontrou uma bomba.");
                return;
            }

            // Contar o n√∫mero de minas adjacentes
            const adjacentIndices = getAdjacentIndices(index);
            const adjacentMinesCount = adjacentIndices.filter(i => mines.has(i)).length;

            cell.textContent = adjacentMinesCount;
            cell.classList.add("revealed");
        }

        // Fun√ß√£o para obter √≠ndices adjacentes
        function getAdjacentIndices(index) {
            const row = Math.floor(index / size);
            const col = index % size;
            const adjacent = [];

            // Checar c√©lulas vizinhas no grid 3x3
            for (let i = -1; i <= 1; i++) {
                for (let j = -1; j <= 1; j++) {
                    if (i === 0 && j === 0) continue;  /* Ignorar a c√©lula atual */
                    const r = row + i;
                    const c = col + j;
                    if (r >= 0 && r < size && c >= 0 && c < size) {
                        adjacent.push(r * size + c);
                    }
                }
            }

            return adjacent;
        }
    

// Fun√ß√£o para reiniciar o jogo
function resetGame() {
    createBoard(); /* Reinicia o jogo */
}


        // Criar o tabuleiro ao carregar a p√°gina
        createBoard();  /* Iniciar o jogo */
    </script>
</body>
</html>
